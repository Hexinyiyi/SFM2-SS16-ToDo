yfore = coefc*(mcds2[5, 61])  + coefZ * alpha #14.06
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc*(mcds2[5, 62])  + coefZ * alpha #14.07
y1fore = cbind(y1fore, yfore)
#mse
#calculate and plot mse
y1org = y51[5, 51:62]
y1fore.ts = ts(t(c(y1fore)), start = c(2013,8), frequency = 12)
y1org.ts  = ts(t(y1org),  start = c(2013,8), frequency = 12)
plot(y1org.ts[1,], lwd = 2, col = "red ", ylim =c(-2,2))
lines(t(y1fore.ts), lwd = 2, col = "blue")
y1diff = y1org - y1fore
y1sum=0
for (j in 1:12)
{
y1sum = y1sum + y1diff[,j]^2
}
y1mse=y1sum/12
## without Geo
load(file = "result_final.dat")
nu = y4
nu_hat = ansall$vt # ans from joint model across four countries
#Pi_hat = commonans0915mac$at
#parB = matrix(c(7.977833e-01,  7.140177e-01,  8.045253e-01,  5.313750e-01,  6.997783e-01), 1, 5)
#Pi = Pi_hat[-1] + parB %*% (nu_hat - t(nu))
#smooth with nu2
smnu = (nu_hat - nu2)
y2diff = y1diff - smnu[5, 51:62]
y2sum=0
for (j in 1:12)
{
y2sum = y2sum + y2diff[,j]^2
}
y2mse=y2sum/12
y1mse
var(c(y1diff))
y2mse
var(c(y2diff))
plot(c(nu), type="l", col="red", xlab="Geopulae-fitted error(red), model-original(black), smoothed-Geo(blue)")
lines(c(nu_hat))
nu1 = smth(c(nu),window = 0.05,method = "gaussian")
lines(nu1, lwd=2, col="blue")
sum(is.na(nu1))
nu1[is.na(nu1)] = 0
## clear history
rm(list = ls(all = TRUE))
graphics.off()
## install and load packages
libraries = c("zoo", "FKF", "expm", "Matrix", "formatR")
#lapply(libraries, function(x) if (!(x %in% installed.packages())) {
#  install.packages(x)
#})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
## read CDS data: eucds1 contains CDS across five countries: 06.2009-12.2014
## eucds2 contains CDS only for Italy
#setwd("C:/Users/chenshic.hub/Dropbox/Panel_NS_AF/Code/MTS_Qcodes/")
setwd("~/Dropbox/AFNS_Shi/20151012_MTS_Qcodes")
##############delect this line setwd######################
eucds = read.csv("eurocds_33343.csv", header = T, sep = ";")
eucds_date = eucds[, 1]
st1 = which(eucds_date == "01.11.2009")
et1 = which(eucds_date == "01.12.2014")
eucds1 = eucds[(st1:et1), 2:6]
mcds1 = as.matrix(t(eucds1))
mcds2 = matrix(rep(mcds1[4, ], 5), nr = 5)
#####################################################################
##MSE, time span: 2009.6-2014.7###########28.04.2016#################
##Part I: without Geocopulae, Part II: without Geo###################
#####################################################################
## load dataset
load("expinf.RData")
uk.epi = expinf[,1]
fr.epi = expinf[,2]
sw.epi = expinf[,3]
it.epi = expinf[,4]
de.epi = expinf[,5]
ukts2 = ts(uk.epi, frequency = 12, start = c(2006, 6))
dets2 = ts(de.epi, frequency = 12, start = c(2009, 6))
frts2 = ts(fr.epi, frequency = 12, start = c(2006, 6))
itts2 = ts(it.epi, frequency = 12, start = c(2007, 6))
swts2 = ts(sw.epi, frequency = 12, start = c(2007, 4))
## select the time period contains all five countries
ukepi = uk.epi[39:100]
frepi = fr.epi[39:100]
swepi = sw.epi[25:86]
itepi = it.epi[27:88]
deepi = de.epi[1:62]
y51 = matrix(c(ukepi, frepi, itepi, swepi, deepi), nr = 5)
#select presample 2009.6-2013.7 and sample period 2013.8-2014.7
y51pre = y51[1:5, 1:50]
## the model with macroeconomic factor - default proxy
jointmodel = function(q1, b1, b2, b3, b4, b5, a1, a2, a3, a4, a5, p1) {
Tt = matrix(c(q1), 1, 1)
Zt = rbind(b1, b2, b3, b4, b5)
ct = matrix(diag(c(a1, a2, a3, a4, a5)), 5, 5) %*% (mcds2[1:5, 1:50])
dt = matrix(c(p1), 1, 1)
GGt = matrix(0.1 * diag(5), 5, 5)
HHt = matrix(0.1 * diag(1), 1, 1)
a0 = mean(y51pre[, 1])
P0 = HHt * 10
return(list(a0 = a0, P0 = P0, ct = ct, dt = dt, Zt = Zt, Tt = Tt, GGt = GGt,
HHt = HHt))
}
objective = function(theta, yt) {
sp = jointmodel(theta["q1"], theta["b1"], theta["b2"], theta["b3"], theta["b4"],
theta["b5"], theta["a1"], theta["a2"], theta["a3"], theta["a4"],
theta["a5"], theta["p1"])
ans = fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt, yt = yt)
return(-ans$logLik)
}
theta = c(q1 = c(0.2), b = c(0.5, 0.5, 0.5, 0.5, 0.5),
a = c(0.3, 0.3, 0.3, 0.3, 0.3), p1 = c(0.8))
fit = optim(theta, objective, yt = y51pre, hessian = TRUE)
sp = jointmodel(fit$par["q1"], fit$par["b1"], fit$par["b2"], fit$par["b3"],
fit$par["b4"], fit$par["b5"], fit$par["a1"], fit$par["a2"], fit$par["a3"],
fit$par["a4"], fit$par["a5"], fit$par["p1"])
ans = fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt, Zt = sp$Zt,
HHt = sp$HHt, GGt = sp$GGt, yt = y51pre)
plot(ans$vt[1, ], ylim = c(-2, 2), type = "l")
lines(ans$vt[2, ])
lines(ans$vt[3, ])
lines(ans$vt[4, ])
lines(ans$vt[5, ])
##Part I
ans$at
fit$par
coefc = matrix(diag(c(fit$par[7],fit$par[8],fit$par[9],fit$par[10],fit$par[11])), 5, 5)
coefZ = matrix(c(fit$par[2],fit$par[3],fit$par[4],fit$par[5], fit$par[6]))
coefd = fit$par[12]
coefT = fit$par[1]
#mse
alpha = coefd + coefT * ans$at[51]
y1fore = coefc %*% (mcds2[1:5, 51])  + coefZ %*% alpha #13.8
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 52])  + coefZ * alpha #13.9
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 53])  + coefZ * alpha #13.10
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 54])  + coefZ * alpha #13.11
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 55])  + coefZ * alpha #13.12
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 56])  + coefZ * alpha #14.01
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 57])  + coefZ * alpha #14.02
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 58])  + coefZ * alpha #14.03
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 59])  + coefZ * alpha #14.04
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 60])  + coefZ * alpha #14.05
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 61])  + coefZ * alpha #14.06
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 62])  + coefZ * alpha #14.07
y1fore = cbind(y1fore, yfore)
#mse
#calculate and plot mse
y1org = y51[, 51:62]
y1fore.ts = ts(t(y1fore), start = c(2013,8), frequency = 12)
y1org.ts  = ts(t(y1org),  start = c(2013,8), frequency = 12)
plot(y1org.ts[1,], lwd = 2, col = "red ", ylim =c(-2,2))
lines(y1fore.ts, lwd = 2, col = "blue")
y1diff = y1org - y1fore
y1sum=0
for (j in 1:12)
{
y1sum = y1sum + y1diff[,j]^2
}
y1mse=y1sum/12
for (i in 1:90)
{
for (j in 1:10)
{
y1sum= y1sum+y1diff[i,j]^2
}
}
y1mse = y1sum/900
########################################
# clear history
rm(list = ls(all = TRUE))
graphics.off()
## install and load packages
libraries = c("zoo", "FKF", "expm", "Matrix", "formatR")
#lapply(libraries, function(x) if (!(x %in% installed.packages())) {
#  install.packages(x)
#})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
## read CDS data: eucds1 contains CDS across five countries: 06.2009-12.2014
## eucds2 contains CDS only for Italy
#setwd("C:/Users/chenshic.hub/Dropbox/Panel_NS_AF/Code/MTS_Qcodes/")
setwd("~/Dropbox/AFNS_Shi/20151012_MTS_Qcodes")
##############delect this line setwd######################
eucds = read.csv("eurocds_33343.csv", header = T, sep = ";")
eucds_date = eucds[, 1]
st1 = which(eucds_date == "01.11.2009")
et1 = which(eucds_date == "01.12.2014")
eucds1 = eucds[(st1:et1), 2:6]
mcds1 = as.matrix(t(eucds1))
mcds2 = matrix(rep(mcds1[4, ], 5), nr = 5)
#####################################################################
##MSE, time span: 2009.6-2014.7###########28.04.2016#################
##Part I: without Geocopulae, Part II: without Geo###################
#####################################################################
## load dataset
load("expinf.RData")
uk.epi = expinf[,1]
fr.epi = expinf[,2]
sw.epi = expinf[,3]
it.epi = expinf[,4]
de.epi = expinf[,5]
ukts2 = ts(uk.epi, frequency = 12, start = c(2006, 6))
dets2 = ts(de.epi, frequency = 12, start = c(2009, 6))
frts2 = ts(fr.epi, frequency = 12, start = c(2006, 6))
itts2 = ts(it.epi, frequency = 12, start = c(2007, 6))
swts2 = ts(sw.epi, frequency = 12, start = c(2007, 4))
## select the time period contains all five countries
ukepi = uk.epi[39:100]
frepi = fr.epi[39:100]
swepi = sw.epi[25:86]
itepi = it.epi[27:88]
deepi = de.epi[1:62]
y51 = matrix(c(ukepi, frepi, itepi, swepi, deepi), nr = 5)
#select presample 2009.6-2013.7 and sample period 2013.8-2014.7
y51pre = y51[1:5, 1:50]
## the model with macroeconomic factor - default proxy
jointmodel = function(q1, b1, b2, b3, b4, b5, a1, a2, a3, a4, a5, p1) {
Tt = matrix(c(q1), 1, 1)
Zt = rbind(b1, b2, b3, b4, b5)
ct = matrix(diag(c(a1, a2, a3, a4, a5)), 5, 5) %*% (mcds2[1:5, 1:50])
dt = matrix(c(p1), 1, 1)
GGt = matrix(0.1 * diag(5), 5, 5)
HHt = matrix(0.1 * diag(1), 1, 1)
a0 = mean(y51pre[, 1])
P0 = HHt * 10
return(list(a0 = a0, P0 = P0, ct = ct, dt = dt, Zt = Zt, Tt = Tt, GGt = GGt,
HHt = HHt))
}
objective = function(theta, yt) {
sp = jointmodel(theta["q1"], theta["b1"], theta["b2"], theta["b3"], theta["b4"],
theta["b5"], theta["a1"], theta["a2"], theta["a3"], theta["a4"],
theta["a5"], theta["p1"])
ans = fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt, yt = yt)
return(-ans$logLik)
}
theta = c(q1 = c(0.2), b = c(0.5, 0.5, 0.5, 0.5, 0.5),
a = c(0.3, 0.3, 0.3, 0.3, 0.3), p1 = c(0.8))
fit = optim(theta, objective, yt = y51pre, hessian = TRUE)
sp = jointmodel(fit$par["q1"], fit$par["b1"], fit$par["b2"], fit$par["b3"],
fit$par["b4"], fit$par["b5"], fit$par["a1"], fit$par["a2"], fit$par["a3"],
fit$par["a4"], fit$par["a5"], fit$par["p1"])
ans = fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt, Zt = sp$Zt,
HHt = sp$HHt, GGt = sp$GGt, yt = y51pre)
plot(ans$vt[1, ], ylim = c(-2, 2), type = "l")
lines(ans$vt[2, ])
lines(ans$vt[3, ])
lines(ans$vt[4, ])
lines(ans$vt[5, ])
abline(h = 0, col = "grey", lwd = 2)
##Part I
ans$at
fit$par
coefc = matrix(diag(c(fit$par[7],fit$par[8],fit$par[9],fit$par[10],fit$par[11])), 5, 5)
coefZ = matrix(c(fit$par[2],fit$par[3],fit$par[4],fit$par[5], fit$par[6]))
coefd = fit$par[12]
coefT = fit$par[1]
#mse
alpha = coefd + coefT * ans$at[51]
y1fore = coefc %*% (mcds2[1:5, 51])  + coefZ %*% alpha #13.8
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 52])  + coefZ * alpha #13.9
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 53])  + coefZ * alpha #13.10
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 54])  + coefZ * alpha #13.11
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 55])  + coefZ * alpha #13.12
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 56])  + coefZ * alpha #14.01
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 57])  + coefZ * alpha #14.02
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 58])  + coefZ * alpha #14.03
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 59])  + coefZ * alpha #14.04
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 60])  + coefZ * alpha #14.05
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 61])  + coefZ * alpha #14.06
y1fore = cbind(y1fore, yfore)
alpha = coefd + coefT * alpha
yfore = coefc%*%(mcds2[1:5, 62])  + coefZ * alpha #14.07
y1fore = cbind(y1fore, yfore)
#calculate and plot mse
y1org = y51[, 51:62]
y1fore.ts = ts(t(y1fore), start = c(2013,8), frequency = 12)
y1org.ts  = ts(t(y1org),  start = c(2013,8), frequency = 12)
plot(y1org.ts[1,], lwd = 2, col = "red ", ylim =c(-2,2))
lines(y1fore.ts, lwd = 2, col = "blue")
y1diff = y1org - y1fore
y1sum=0
for (j in 1:12)
{
y1sum = y1sum + y1diff[,j]^2
}
y1mse=y1sum/12
library(TTR)
library(smoother)
load(file = "result_final.dat")
nu = y4
nu_hat = ansall$vt
#method1:smooth the Geo-error#use this one
plot(c(nu), type="l", col="red", xlab="Geopulae-fitted error(red), model-original(black), smoothed-Geo(blue)")
lines(c(nu_hat))
nu1 = smth(c(nu),window = 0.05,method = "gaussian")
lines(nu1, lwd=2, col="blue")
sum(is.na(nu1))
nu1[is.na(nu1)] = 0
nu2 = matrix(nu1, 5, 62)
smnu = (nu_hat - nu2)
y2diff = y1diff - smnu[1, 51:62]
## Part II
load(file = "result_final.dat")
load("commonfit0915mac.RData")
load("commonans0915mac.RData")
nu = y4
nu_hat = commonans0915mac$vt
plot(c(nu), type="l", col="red", xlab="Geopulae-fitted error(red), model-original(black), smoothed-Geo(blue)")
lines(c(nu_hat))
nu1 = smth(c(nu),window = 0.05,method = "gaussian")
lines(nu1, lwd=2, col="blue")
sum(is.na(nu1))
nu1[is.na(nu1)] = 0
nu2 = matrix(nu1, 5, 62)
y2sum=0
for (j in 1:12)
{
y2sum = y2sum + y2diff[,j]^2
}
y2mse=y2sum/12
smnu = (nu_hat - nu2)
y2diff = y1diff - smnu[1, 51:62]
y2sum=0
for (j in 1:12)
{
y2sum = y2sum + y2diff[,j]^2
}
y2mse=y2sum/12
y1mse
y2mse
var(c(y1diff))
str(y1diff)
var(c(y1diff[1,]))
var(c(y1diff[2,]))
var(c(y1diff[3,]))
var(c(y1diff[4,]))
var(c(y1diff[5,]))
var(c(y1diff[6,]))
y2ms
y2mse
var(c(y2diff[1,]))
var(c(y2diff[2,]))
var(c(y2diff[3,]))
var(c(y2diff[4,]))
var(c(y2diff[5,]))
var(c(y2diff[6,]))
setwd("~/SFE-ToDo/Dataset(2004-2014)")
load("FSE_LSE_2014.dat")
read.table("sfm_pri.dat"
)+
)
read.table("sfm_pri.dat")
read.table("FSE_LSE_2014.dat")
aa = read.table("FSE_LSE_2014.dat")
aa[1,]
aa[,1]
aa[2,1]
str(aa)
str(aa)
summary(aa)
summary(aa$V1)
source('~/SFM2-SS16-ToDo/SFEgarchest/SFEgarchest.r')
library(tseries)
library(fGarch)
library(rugarch)
# Read data for FSE and LSE
DS = read.table("FSE_LSE.dat");
D = DS[,1]                            # date
S = DS[,2:43]                         # S(t)
s = log(S)
end = length(D)                       # log(S(t))
r = s[2:end,] - s[1:(end-1),]         # r(t)
n = length(r)                         # sample size
t = c(1:n)                            # time index, t
# Parameter estimation of various GARCH models
# (1) AR(1)-GARCH(1,1)
#DAX.AR1GARCH11 = garchFit(~ arma(1,0) + garch(1,1), r[,1], trace=T)
DAX.AR1GARCH11 = garchFit(~ arma(1,0) + garch(1,1), r[,1], trace=F)
#FTSE.AR1GARCH11 = garchFit(~ arma(1,0) + garch(1,1), r[,22], trace=T)
FTSE.AR1GARCH11 = garchFit(~ arma(1,0) + garch(1,1), r[,22], trace=F)
# (2) AR(1)-TGARCH(1,1)
DAX.AR1TGARCH11 = garchFit(~arma(1,0)+aparch(1,1), data = r[,1], delta = 2, include.delta = FALSE,leverage=TRUE)
FTSE.AR1TGARCH11 = garchFit(~arma(1,0)+aparch(1,1), data = r[,22], delta = 2, include.delta = FALSE,leverage=TRUE)
# (3) AR(1)-EGARCH(1,1)
ctrl = list(RHO = 1,DELTA = 1e-8,MAJIT = 100,MINIT = 650,TOL = 1e-6)
spec = ugarchspec(variance.model = list(model = "eGARCH", garchOrder = c(1,1)), mean.model = list(armaOrder = c(1,0), include.mean = TRUE), distribution.model = "std")
DAX.AR1EGARCH11 = ugarchfit(data = r[,1], spec = spec, solver = "solnp", solver.control = ctrl)
FTSE.AR1EGARCH11 = ugarchfit(data = r[,22], spec = spec, solver = "solnp", solver.control = ctrl)
# Summary of parameter estimates (P), standard errors (E), t-statistics (T) and p-values (Pvalues)
P = matrix(0,7,6)
P[,1]=c(DAX.AR1GARCH11@fit$matcoef[,1],0,0)
P[,2]=c(FTSE.AR1GARCH11@fit$matcoef[,1],0,0)
P[,3]=c(DAX.AR1TGARCH11@fit$matcoef[,1],0)
P[,4]=c(FTSE.AR1TGARCH11@fit$matcoef[,1],0)
P[,5]=c(DAX.AR1EGARCH11@fit$matcoef[,1])
P[,6]=c(FTSE.AR1EGARCH11@fit$matcoef[,1])
E = matrix(0,7,6)
E[,1]=c(DAX.AR1GARCH11@fit$matcoef[,2],0,0)
E[,2]=c(FTSE.AR1GARCH11@fit$matcoef[,2],0,0)
E[,3]=c(DAX.AR1TGARCH11@fit$matcoef[,2],0)
E[,4]=c(FTSE.AR1TGARCH11@fit$matcoef[,2],0)
E[,5]=c(DAX.AR1EGARCH11@fit$matcoef[,2])
E[,6]=c(FTSE.AR1EGARCH11@fit$matcoef[,2])
T = P/E
Pvalues = matrix(0,7,6)
Pvalues[,1]=c(DAX.AR1GARCH11@fit$matcoef[,4],0,0)
Pvalues[,2]=c(FTSE.AR1GARCH11@fit$matcoef[,4],0,0)
Pvalues[,3]=c(DAX.AR1TGARCH11@fit$matcoef[,4],0)
Pvalues[,4]=c(FTSE.AR1TGARCH11@fit$matcoef[,4],0)
Pvalues[,5]=c(DAX.AR1EGARCH11@fit$matcoef[,4])
Pvalues[,6]=c(FTSE.AR1EGARCH11@fit$matcoef[,4])
P
E
T
Pvalues
setwd("~/SFM2-SS16-ToDo/SFEgarchest")
# Read data for FSE and LSE
DS = read.table("FSE_LSE.dat");
D = DS[,1]                            # date
S = DS[,2:43]                         # S(t)
s = log(S)
end = length(D)                       # log(S(t))
r = s[2:end,] - s[1:(end-1),]         # r(t)
n = length(r)                         # sample size
t = c(1:n)                            # time index, t
# Parameter estimation of various GARCH models
# (1) AR(1)-GARCH(1,1)
#DAX.AR1GARCH11 = garchFit(~ arma(1,0) + garch(1,1), r[,1], trace=T)
DAX.AR1GARCH11 = garchFit(~ arma(1,0) + garch(1,1), r[,1], trace=F)
#FTSE.AR1GARCH11 = garchFit(~ arma(1,0) + garch(1,1), r[,22], trace=T)
FTSE.AR1GARCH11 = garchFit(~ arma(1,0) + garch(1,1), r[,22], trace=F)
# (2) AR(1)-TGARCH(1,1)
DAX.AR1TGARCH11 = garchFit(~arma(1,0)+aparch(1,1), data = r[,1], delta = 2, include.delta = FALSE,leverage=TRUE)
FTSE.AR1TGARCH11 = garchFit(~arma(1,0)+aparch(1,1), data = r[,22], delta = 2, include.delta = FALSE,leverage=TRUE)
# (3) AR(1)-EGARCH(1,1)
ctrl = list(RHO = 1,DELTA = 1e-8,MAJIT = 100,MINIT = 650,TOL = 1e-6)
spec = ugarchspec(variance.model = list(model = "eGARCH", garchOrder = c(1,1)), mean.model = list(armaOrder = c(1,0), include.mean = TRUE), distribution.model = "std")
DAX.AR1EGARCH11 = ugarchfit(data = r[,1], spec = spec, solver = "solnp", solver.control = ctrl)
FTSE.AR1EGARCH11 = ugarchfit(data = r[,22], spec = spec, solver = "solnp", solver.control = ctrl)
# Summary of parameter estimates (P), standard errors (E), t-statistics (T) and p-values (Pvalues)
P = matrix(0,7,6)
P[,1]=c(DAX.AR1GARCH11@fit$matcoef[,1],0,0)
P[,2]=c(FTSE.AR1GARCH11@fit$matcoef[,1],0,0)
P[,3]=c(DAX.AR1TGARCH11@fit$matcoef[,1],0)
P[,4]=c(FTSE.AR1TGARCH11@fit$matcoef[,1],0)
P[,5]=c(DAX.AR1EGARCH11@fit$matcoef[,1])
P[,6]=c(FTSE.AR1EGARCH11@fit$matcoef[,1])
E = matrix(0,7,6)
E[,1]=c(DAX.AR1GARCH11@fit$matcoef[,2],0,0)
E[,2]=c(FTSE.AR1GARCH11@fit$matcoef[,2],0,0)
E[,3]=c(DAX.AR1TGARCH11@fit$matcoef[,2],0)
E[,4]=c(FTSE.AR1TGARCH11@fit$matcoef[,2],0)
E[,5]=c(DAX.AR1EGARCH11@fit$matcoef[,2])
E[,6]=c(FTSE.AR1EGARCH11@fit$matcoef[,2])
T = P/E
Pvalues = matrix(0,7,6)
Pvalues[,1]=c(DAX.AR1GARCH11@fit$matcoef[,4],0,0)
Pvalues[,2]=c(FTSE.AR1GARCH11@fit$matcoef[,4],0,0)
Pvalues[,3]=c(DAX.AR1TGARCH11@fit$matcoef[,4],0)
Pvalues[,4]=c(FTSE.AR1TGARCH11@fit$matcoef[,4],0)
Pvalues[,5]=c(DAX.AR1EGARCH11@fit$matcoef[,4])
Pvalues[,6]=c(FTSE.AR1EGARCH11@fit$matcoef[,4])
P
E
T
Pvalues
head(DS)
P
E
T
