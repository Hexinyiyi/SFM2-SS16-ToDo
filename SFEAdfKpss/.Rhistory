"p-val.4" ,"KPSS.constant.8","crit-val.1",
"KPSS.constant.12","crit-val.2","KPSS.trend.8",
"crit-val.3","KPSS.trend.12", "crit-val.4")))
for(i in 1:ncol(x))		# start calc. table
{
#******   ADF   **************************
e = adfTest(x[,i],lags = 0, type ="c")
result[i,1] = as.numeric(e@test$statistic)
result[i,2] = as.numeric(e@test$p.value)
e = adfTest(x[,i],lags = 4, type ="c")
result[i,3] = as.numeric(e@test$statistic)
result[i,4] = as.numeric(e@test$p.value)
e=adfTest(x[,i],lags = 0, type ="ct")
result[i,5] = as.numeric(e@test$statistic)
result[i,6] = as.numeric(e@test$p.value)
e=adfTest(x[,i],lags = 4,type ="ct")
result[i,7] = as.numeric(e@test$statistic)
result[i,8] = as.numeric(e@test$p.value)
#****   KPSS   ***************************
j=urkpssTest(x[,i], type = "mu",use.lag = 8, doplot = FALSE)
result[i,9] = as.numeric(j@test$test@teststat)
result[i,10] = as.numeric(j@test$test@cval[1,2])
k=urkpssTest(x[,i], type = "tau",use.lag = 12, doplot = FALSE)
result[i,11] = as.numeric(k@test$test@teststat)
result[i,12] = as.numeric(k@test$test@cval[1,2])
l=urkpssTest(x[,i], type = "mu",use.lag = 8, doplot = FALSE)
result[i,13] = as.numeric(l@test$test@teststat)
result[i,14] = as.numeric(l@test$test@cval[1,2])
m=urkpssTest(x[,i], type = "tau",use.lag = 12, doplot = FALSE)
result[i,15] = as.numeric(m@test$test@teststat)
result[i,16] = as.numeric(m@test$test@cval[1,2])
}
View(ADF_results)
View(result)
z = c(1,3,5,7)
ADF_results= round(result[,1:8],2)
for (r in z){
for (i in 1:nrow(ADF_results)){
if (ADF_results[i, r+1] <= 0.05){
ADF_results[i,r] = paste0(ADF_results[i,r]," *")
}
}
}
View(ADF_results)
View(datax)
View(ADF_results)
KPSS_results = round(result[,9:16],2)
for (i in 1:nrow(KPSS_results)){
for (r in z){
if (as.numeric(KPSS_results[i,r]) > (as.numeric(KPSS_results[i,r+1]) %*% 1.96)){
KPSS_results[i,r] = paste0(KPSS_results[i,r]," *")
}else{
KPSS_results[i,r] = KPSS_results[i,r]
}
}
}
View(KPSS_results)
library("xtable")
xtable(ADF_results[1:21,])
xtable(ADF_results[1:21,z])
z = c(1,3,5,7)
ADF_results= round(result[,1:8],2)
for (r in z){
for (i in 1:nrow(ADF_results)){
if (ADF_results[i, r+1] <= 0.05){
ADF_results[i,r] = paste0(ADF_results[i,r],"*")
}
}
}
KPSS_results = round(result[,9:16],2)
for (i in 1:nrow(KPSS_results)){
for (r in z){
if (as.numeric(KPSS_results[i,r]) > (as.numeric(KPSS_results[i,r+1]) %*% 1.96)){
KPSS_results[i,r] = paste0(KPSS_results[i,r],"*")
}else{
KPSS_results[i,r] = KPSS_results[i,r]
}
}
}
rbind(ADF_results[1:21,z], KPSS_results[1:21,z])
cbind(ADF_results[1:21,z], KPSS_results[1:21,z])
xtable(cbind(ADF_results[1:21,z], KPSS_results[1:21,z]))
xtable(cbind(ADF_results[22:42,z], KPSS_results[22:42,z]))
# clear variables and close windows
rm(list = ls(all = TRUE))
graphics.off()
# install and load packages
libraries = c("tseries", "fGarch", "rugarch")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# Read data for FSE and LSE
DS  = read.csv2("DAXFTSE.csv", stringsAsFactors = FALSE)
D   = DS[, 1]       # date
S   = DS[, 2:43]    # S(t)
S   = as.data.frame(sapply(S, as.numeric))
s   = log(S)
end = length(D)     # log(S(t))
r   = s[2:end, ] - s[1:(end - 1), ]  # r(t)
n   = length(r)     # sample size
t   = c(1:n)        # time index, t
# Parameter estimation of various GARCH models
# (1) AR(1)-GARCH(1,1)
DAX.AR1GARCH11  = garchFit(~arma(1, 0) + garch(1, 1), r[, 1], trace = T)
FTSE.AR1GARCH11 = garchFit(~arma(1, 0) + garch(1, 1), r[, 22], trace = T)
# (2) AR(1)-TGARCH(1,1)
DAX.AR1TGARCH11  = garchFit(~arma(1, 0) + aparch(1, 1), data = r[, 1], delta = 2,
include.delta = FALSE, leverage = TRUE)
FTSE.AR1TGARCH11 = garchFit(~arma(1, 0) + aparch(1, 1), data = r[, 22], delta = 2,
include.delta = FALSE, leverage = TRUE)
# (3) AR(1)-EGARCH(1,1)
ctrl = list(RHO = 1, DELTA = 1e-08, MAJIT = 100, MINIT = 650, TOL = 1e-06)
spec = ugarchspec(variance.model = list(model = "eGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0), include.mean = TRUE), distribution.model = "std")
DAX.AR1EGARCH11 = ugarchfit(data = r[, 1], spec = spec, solver = "solnp", solver.control = ctrl)
FTSE.AR1EGARCH11 = ugarchfit(data = r[, 22], spec = spec, solver = "solnp", solver.control = ctrl)
# Summary of parameter estimates (P), standard errors (E), t-statistics (T) and p-values (Pvalues)
P = matrix(0, 7, 6)
P[, 1] = c(DAX.AR1GARCH11@fit$matcoef[, 1], 0, 0)
P[, 2] = c(FTSE.AR1GARCH11@fit$matcoef[, 1], 0, 0)
P[, 3] = c(DAX.AR1TGARCH11@fit$matcoef[, 1], 0)
P[, 4] = c(FTSE.AR1TGARCH11@fit$matcoef[, 1], 0)
P[, 5] = c(DAX.AR1EGARCH11@fit$matcoef[, 1])
P[, 6] = c(FTSE.AR1EGARCH11@fit$matcoef[, 1])
E = matrix(0, 7, 6)
E[, 1] = c(DAX.AR1GARCH11@fit$matcoef[, 2], 0, 0)
E[, 2] = c(FTSE.AR1GARCH11@fit$matcoef[, 2], 0, 0)
E[, 3] = c(DAX.AR1TGARCH11@fit$matcoef[, 2], 0)
E[, 4] = c(FTSE.AR1TGARCH11@fit$matcoef[, 2], 0)
E[, 5] = c(DAX.AR1EGARCH11@fit$matcoef[, 2])
E[, 6] = c(FTSE.AR1EGARCH11@fit$matcoef[, 2])
T = P/E
Pvalues = matrix(0, 7, 6)
Pvalues[, 1] = c(DAX.AR1GARCH11@fit$matcoef[, 4], 0, 0)
Pvalues[, 2] = c(FTSE.AR1GARCH11@fit$matcoef[, 4], 0, 0)
Pvalues[, 3] = c(DAX.AR1TGARCH11@fit$matcoef[, 4], 0)
Pvalues[, 4] = c(FTSE.AR1TGARCH11@fit$matcoef[, 4], 0)
Pvalues[, 5] = c(DAX.AR1EGARCH11@fit$matcoef[, 4])
Pvalues[, 6] = c(FTSE.AR1EGARCH11@fit$matcoef[, 4])
# Output
print("Parameter estimates")
print(P)
print("Standard errors")
print(E)
print("t-statistics")
print(T)
print("p-values")
print(Pvalues)
library(xtable)
xtable(p)
xtable(P)
xtable(Pvalues)
print("Parameter estimates")
print(P)
DAX.AR1GARCH11@fit$matcoef
round(DAX.AR1GARCH11@fit$matcoef,5)
DAX.AR1GARCH11@fit$matcoef
print(E)
DAX.AR1GARCH11@fit$matcoef
FTSE.AR1GARCH11@fit$matcoef
DAX.AR1TGARCH11@fit$matcoef
# clear variables and close windows
rm(list = ls(all = TRUE))
graphics.off()
# install and load packages
libraries = c("tseries", "fGarch", "rugarch")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# Read data for FSE and LSE
DS  = read.csv2("DAXFTSE.csv", stringsAsFactors = FALSE)
D   = DS[, 1]       # date
S   = DS[, 2:43]    # S(t)
S   = as.data.frame(sapply(S, as.numeric))
s   = log(S)
end = length(D)     # log(S(t))
r   = s[2:end, ] - s[1:(end - 1), ]  # r(t)
n   = length(r)     # sample size
t   = c(1:n)        # time index, t
# Parameter estimation of various GARCH models
# (1) AR(1)-GARCH(1,1)
DAX.AR1GARCH11  = garchFit(~arma(1, 0) + garch(1, 1), r[, 1], trace = T)
FTSE.AR1GARCH11 = garchFit(~arma(1, 0) + garch(1, 1), r[, 22], trace = T)
# (2) AR(1)-TGARCH(1,1)
DAX.AR1TGARCH11  = garchFit(~arma(1, 0) + aparch(1, 1), data = r[, 1], delta = 2,
include.delta = FALSE, leverage = TRUE)
FTSE.AR1TGARCH11 = garchFit(~arma(1, 0) + aparch(1, 1), data = r[, 22], delta = 2,
include.delta = FALSE, leverage = TRUE)
# (3) AR(1)-EGARCH(1,1)
ctrl = list(RHO = 1, DELTA = 1e-08, MAJIT = 100, MINIT = 650, TOL = 1e-06)
spec = ugarchspec(variance.model = list(model = "eGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0), include.mean = TRUE), distribution.model = "std")
DAX.AR1EGARCH11 = ugarchfit(data = r[, 1], spec = spec, solver = "solnp", solver.control = ctrl)
FTSE.AR1EGARCH11 = ugarchfit(data = r[, 22], spec = spec, solver = "solnp", solver.control = ctrl)
# Summary of parameter estimates (P), standard errors (E), t-statistics (T) and p-values (Pvalues)
P = matrix(0, 7, 6)
P[, 1] = c(DAX.AR1GARCH11@fit$matcoef[, 1], 0, 0)
P[, 2] = c(FTSE.AR1GARCH11@fit$matcoef[, 1], 0, 0)
P[, 3] = c(DAX.AR1TGARCH11@fit$matcoef[, 1], 0)
P[, 4] = c(FTSE.AR1TGARCH11@fit$matcoef[, 1], 0)
P[, 5] = c(DAX.AR1EGARCH11@fit$matcoef[, 1])
P[, 6] = c(FTSE.AR1EGARCH11@fit$matcoef[, 1])
E = matrix(0, 7, 6)
E[, 1] = c(DAX.AR1GARCH11@fit$matcoef[, 2], 0, 0)
E[, 2] = c(FTSE.AR1GARCH11@fit$matcoef[, 2], 0, 0)
E[, 3] = c(DAX.AR1TGARCH11@fit$matcoef[, 2], 0)
E[, 4] = c(FTSE.AR1TGARCH11@fit$matcoef[, 2], 0)
E[, 5] = c(DAX.AR1EGARCH11@fit$matcoef[, 2])
E[, 6] = c(FTSE.AR1EGARCH11@fit$matcoef[, 2])
T = P/E
Pvalues = matrix(0, 7, 6)
Pvalues[, 1] = c(DAX.AR1GARCH11@fit$matcoef[, 4], 0, 0)
Pvalues[, 2] = c(FTSE.AR1GARCH11@fit$matcoef[, 4], 0, 0)
Pvalues[, 3] = c(DAX.AR1TGARCH11@fit$matcoef[, 4], 0)
Pvalues[, 4] = c(FTSE.AR1TGARCH11@fit$matcoef[, 4], 0)
Pvalues[, 5] = c(DAX.AR1EGARCH11@fit$matcoef[, 4])
Pvalues[, 6] = c(FTSE.AR1EGARCH11@fit$matcoef[, 4])
# Output
print("Parameter estimates")
print(P)
print("Standard errors")
print(E)
print("t-statistics")
print(T)
print("p-values")
print(Pvalues)
library(xtable)
xtable(Pvalues)
DAX.AR1TGARCH11
AX.AR1EGARCH11
DAX.AR1EGARCH11
DAX.AR1TGARCH11
AR1TGARCH11
DAX.AR1EGARCH11
FTSE.AR1GARCH11
FTSE.AR1TGARCH11
FTSE.AR1TGARCH11
FTSE.AR1EGARCH11
DAX.AR1GARCH11
FTSE.AR1GARCH11
DAX.AR1TGARCH11
FTSE.AR1TGARCH11
DAX.AR1TGARCH11
FTSE.AR1EGARCH11
DAX.AR1EGARCH11
FTSE.AR1EGARCH11
setwd("/Users/Sophie/Desktop/ERS/SFEAdfKpss")
# clear variables and close windows
rm(list = ls(all = TRUE))
graphics.off()
# install and load packages
libraries = c("tseries", "fUnitRoots", "urca")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
datax = read.csv2("DAXFTSE.csv", stringsAsFactors = FALSE)
datax = as.data.frame(sapply(datax[,2:43], as.numeric))
stocks = as.matrix(c("DAX","SAP", "SIEMENS", "BAYER", "DEUTSCHE.TELEKOM", "BASF", "VOLKSWAGEN",
"DAIMLER", "ALLIANZ", "BMW", "HENKEL", "FRESENIUS", "CONTINENTAL",
"DEUTSCHE.POST", "ADIDAS", "FRESENIUS.MED.CARE", "MUENCHENER.RUCK.",
"LINDE", "BEIERSDORF", "E.ON", "DEUTSCHE.BANK", "FTSE.100...PRICE.INDEX",
"ROYAL.DUTCH.SHELL.B", "UNILEVER..UK.", "HSBC.HDG...ORD..0.50.",
"BRITISH.AMERICAN.TOBACCO", "GLAXOSMITHKLINE", "SABMILLER", "BP",
"VODAFONE.GROUP", "ASTRAZENECA", "RECKITT.BENCKISER.GROUP", "DIAGEO",
"BT.GROUP", "LLOYDS.BANKING.GROUP", "BHP.BILLITON", "NATIONAL.GRID",
"IMPERIAL.BRANDS", "RIO.TINTO", "PRUDENTIAL", "ROYAL.BANK.OF.SCTL.GP.",
"BARCLAYS"))
x = log(datax)
st = stocks
result=matrix(NA,ncol=16,nrow=ncol(x),
dimnames = list(st,c("ADF.constant.0",
"p-val.1","ADF.constant.4","p-val.2",
"ADF.trend.0","p-val.3","ADF.trend.4",
"p-val.4" ,"KPSS.constant.8","crit-val.1",
"KPSS.constant.12","crit-val.2","KPSS.trend.8",
"crit-val.3","KPSS.trend.12", "crit-val.4")))
for(i in 1:ncol(x))		# start calc. table
{
#******   ADF   **************************
e = adfTest(x[,i],lags = 0, type ="c")
result[i,1] = as.numeric(e@test$statistic)
result[i,2] = as.numeric(e@test$p.value)
e = adfTest(x[,i],lags = 4, type ="c")
result[i,3] = as.numeric(e@test$statistic)
result[i,4] = as.numeric(e@test$p.value)
e=adfTest(x[,i],lags = 0, type ="ct")
result[i,5] = as.numeric(e@test$statistic)
result[i,6] = as.numeric(e@test$p.value)
e=adfTest(x[,i],lags = 4,type ="ct")
result[i,7] = as.numeric(e@test$statistic)
result[i,8] = as.numeric(e@test$p.value)
#****   KPSS   ***************************
j=urkpssTest(x[,i], type = "mu",use.lag = 8, doplot = FALSE)
result[i,9] = as.numeric(j@test$test@teststat)
result[i,10] = as.numeric(j@test$test@cval[1,2])
k=urkpssTest(x[,i], type = "tau",use.lag = 12, doplot = FALSE)
result[i,11] = as.numeric(k@test$test@teststat)
result[i,12] = as.numeric(k@test$test@cval[1,2])
l=urkpssTest(x[,i], type = "mu",use.lag = 8, doplot = FALSE)
result[i,13] = as.numeric(l@test$test@teststat)
result[i,14] = as.numeric(l@test$test@cval[1,2])
m=urkpssTest(x[,i], type = "tau",use.lag = 12, doplot = FALSE)
result[i,15] = as.numeric(m@test$test@teststat)
result[i,16] = as.numeric(m@test$test@cval[1,2])
}
z = c(1,3,5,7)
ADF_results= round(result[,1:8],2)
for (r in z){
for (i in 1:nrow(ADF_results)){
if (ADF_results[i, r+1] <= 0.05){
ADF_results[i,r] = paste0(ADF_results[i,r],"*")
}
}
}
KPSS_results = round(result[,9:16],2)
for (i in 1:nrow(KPSS_results)){
for (r in z){
if (as.numeric(KPSS_results[i,r]) > (as.numeric(KPSS_results[i,r+1]) %*% 1.96)){
KPSS_results[i,r] = paste0(KPSS_results[i,r],"*")
}else{
KPSS_results[i,r] = KPSS_results[i,r]
}
}
}
library("xtable")
xtable(cbind(ADF_results[22:42,z], KPSS_results[22:42,z]))
View(result)
View(result)
setwd("/Users/Sophie/Desktop/ERS/SFEAdfKpss")
# clear variables and close windows
rm(list = ls(all = TRUE))
graphics.off()
# install and load packages
libraries = c("tseries", "fUnitRoots", "urca")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
datax = read.csv2("DAXFTSE.csv", stringsAsFactors = FALSE)
datax = as.data.frame(sapply(datax[,2:43], as.numeric))
stocks = as.matrix(c("DAX","SAP", "SIEMENS", "BAYER", "DEUTSCHE.TELEKOM", "BASF", "VOLKSWAGEN",
"DAIMLER", "ALLIANZ", "BMW", "HENKEL", "FRESENIUS", "CONTINENTAL",
"DEUTSCHE.POST", "ADIDAS", "FRESENIUS.MED.CARE", "MUENCHENER.RUCK.",
"LINDE", "BEIERSDORF", "E.ON", "DEUTSCHE.BANK", "FTSE.100...PRICE.INDEX",
"ROYAL.DUTCH.SHELL.B", "UNILEVER..UK.", "HSBC.HDG...ORD..0.50.",
"BRITISH.AMERICAN.TOBACCO", "GLAXOSMITHKLINE", "SABMILLER", "BP",
"VODAFONE.GROUP", "ASTRAZENECA", "RECKITT.BENCKISER.GROUP", "DIAGEO",
"BT.GROUP", "LLOYDS.BANKING.GROUP", "BHP.BILLITON", "NATIONAL.GRID",
"IMPERIAL.BRANDS", "RIO.TINTO", "PRUDENTIAL", "ROYAL.BANK.OF.SCTL.GP.",
"BARCLAYS"))
x = log(datax)
st = stocks
result=matrix(NA,ncol=16,nrow=ncol(x),
dimnames = list(st,c("ADF.constant.0",
"p-val.1","ADF.constant.4","p-val.2",
"ADF.trend.0","p-val.3","ADF.trend.4",
"p-val.4" ,"KPSS.constant.8","crit-val.1",
"KPSS.constant.12","crit-val.2","KPSS.trend.8",
"crit-val.3","KPSS.trend.12", "crit-val.4")))
for(i in 1:ncol(x))		# start calc. table
{
#******   ADF   **************************
e = adfTest(x[,i],lags = 0, type ="c")
result[i,1] = as.numeric(e@test$statistic)
result[i,2] = as.numeric(e@test$p.value)
e = adfTest(x[,i],lags = 4, type ="c")
result[i,3] = as.numeric(e@test$statistic)
result[i,4] = as.numeric(e@test$p.value)
e=adfTest(x[,i],lags = 0, type ="ct")
result[i,5] = as.numeric(e@test$statistic)
result[i,6] = as.numeric(e@test$p.value)
e=adfTest(x[,i],lags = 4,type ="ct")
result[i,7] = as.numeric(e@test$statistic)
result[i,8] = as.numeric(e@test$p.value)
#****   KPSS   ***************************
j=urkpssTest(x[,i], type = "mu",use.lag = 8, doplot = FALSE)
result[i,9] = as.numeric(j@test$test@teststat)
result[i,10] = as.numeric(j@test$test@cval[1,2])
k=urkpssTest(x[,i], type = "mu",use.lag = 12, doplot = FALSE)
result[i,11] = as.numeric(k@test$test@teststat)
result[i,12] = as.numeric(k@test$test@cval[1,2])
l=urkpssTest(x[,i], type = "tau",use.lag = 8, doplot = FALSE)
result[i,13] = as.numeric(l@test$test@teststat)
result[i,14] = as.numeric(l@test$test@cval[1,2])
m=urkpssTest(x[,i], type = "tau",use.lag = 12, doplot = FALSE)
result[i,15] = as.numeric(m@test$test@teststat)
result[i,16] = as.numeric(m@test$test@cval[1,2])
}
z = c(1,3,5,7)
ADF_results= round(result[,1:8],2)
for (r in z){
for (i in 1:nrow(ADF_results)){
if (ADF_results[i, r+1] <= 0.05){
ADF_results[i,r] = paste0(ADF_results[i,r],"*")
}
}
}
KPSS_results = round(result[,9:16],2)
for (i in 1:nrow(KPSS_results)){
for (r in z){
if (as.numeric(KPSS_results[i,r]) > (as.numeric(KPSS_results[i,r+1]) %*% 1.96)){
KPSS_results[i,r] = paste0(KPSS_results[i,r],"*")
}else{
KPSS_results[i,r] = KPSS_results[i,r]
}
}
}
library("xtable")
xtable(cbind(ADF_results[22:42,z], KPSS_results[22:42,z]))
xtable(cbind(ADF_results[22:42,z], KPSS_results[22:42,z]))
View(result)
xtable(cbind(ADF_results[1:21,z], KPSS_results[1:21,z]))
xtable(cbind(ADF_results[22:42,z], KPSS_results[22:42,z]))
xtable(cbind(ADF_results[1:21,z], KPSS_results[1:21,z]))
xtable(cbind(ADF_results[22:42,z], KPSS_results[22:42,z]))
# install and load packages
libraries = c("tseries", "fUnitRoots", "urca")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
setwd("/Users/Sophie/Desktop/ERS/SFEAdfKpss")
# clear variables and close windows
rm(list = ls(all = TRUE))
graphics.off()
# install and load packages
libraries = c("tseries", "fUnitRoots", "urca")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
datax = read.csv2("DAXFTSE.csv", stringsAsFactors = FALSE)
datax = as.data.frame(sapply(datax[,2:43], as.numeric))
stocks = as.matrix(c("DAX", "SAP", "SIEMENS", "BAYER", "DEUTSCHE.TELEKOM", "BASF", "VOLKSWAGEN",
"DAIMLER", "ALLIANZ", "BMW", "HENKEL", "FRESENIUS", "CONTINENTAL",
"DEUTSCHE.POST", "ADIDAS", "FRESENIUS.MED.CARE", "MUENCHENER.RUCK.",
"LINDE", "BEIERSDORF", "E.ON", "DEUTSCHE.BANK", "FTSE.100",
"ROYAL.DUTCH.SHELL.B", "UNILEVER", "HSBC",
"BRITISH.AMERICAN.TOBACCO", "GLAXOSMITHKLINE", "SABMILLER", "BP",
"VODAFONE.GROUP", "ASTRAZENECA", "RECKITT.BENCKISER.GROUP", "DIAGEO",
"BT.GROUP", "LLOYDS.BANKING.GROUP", "BHP.BILLITON", "NATIONAL.GRID",
"IMPERIAL.BRANDS", "RIO.TINTO", "PRUDENTIAL", "ROYAL.BANK.OF.SCTL.GP.",
"BARCLAYS"))
x  = log(datax)
st = stocks
result = matrix(NA,ncol = 16,nrow = ncol(x),
dimnames = list(st,c("ADF.constant.0",
"p-val.1","ADF.constant.4","p-val.2",
"ADF.trend.0","p-val.3","ADF.trend.4",
"p-val.4" ,"KPSS.constant.8","crit-val.1",
"KPSS.constant.12","crit-val.2","KPSS.trend.8",
"crit-val.3","KPSS.trend.12", "crit-val.4")))
for(i in 1:ncol(x))		# start calc. table
{
#******   ADF   **************************
# constant
e = adfTest(x[,i],lags = 0, type ="nc")
result[i,1] = as.numeric(e@test$statistic)
result[i,2] = as.numeric(e@test$p.value)
f = adfTest(x[,i],lags = 4, type = "nc")
result[i,3] = as.numeric(f@test$statistic)
result[i,4] = as.numeric(f@test$p.value)
# constant plus trend
g = adfTest(x[,i],lags = 0, type = "ct")
result[i,5] = as.numeric(g@test$statistic)
result[i,6] = as.numeric(g@test$p.value)
h = adfTest(x[,i],lags = 4,type = "ct")
result[i,7] = as.numeric(h@test$statistic)
result[i,8] = as.numeric(h@test$p.value)
#****   KPSS   ***************************
# constant
j = urkpssTest(x[,i], type = "mu",use.lag = 8, doplot = FALSE)
result[i,9]  = as.numeric(j@test$test@teststat)
result[i,10] = as.numeric(j@test$test@cval[1,2])
k = urkpssTest(x[,i], type = "mu",use.lag = 12, doplot = FALSE)
result[i,11] = as.numeric(k@test$test@teststat)
result[i,12] = as.numeric(k@test$test@cval[1,2])
# constant plus trend
l = urkpssTest(x[,i], type = "tau",use.lag = 8, doplot = FALSE)
result[i,13] = as.numeric(l@test$test@teststat)
result[i,14] = as.numeric(l@test$test@cval[1,2])
m = urkpssTest(x[,i], type = "tau",use.lag = 12, doplot = FALSE)
result[i,15] = as.numeric(m@test$test@teststat)
result[i,16] = as.numeric(m@test$test@cval[1,2])
}
#*****Add automatically significance stars to Output
z = c(1,3,5,7)
ADF_results= round(result[,1:8],2)
for (r in z){
for (i in 1:nrow(ADF_results)){
if (ADF_results[i, r+1] <= 0.05){
ADF_results[i,r] = paste0(ADF_results[i,r],"*")
}
}
}
KPSS_results = round(result[,9:16],2)
for (i in 1:nrow(KPSS_results)){
for (r in z){
if (as.numeric(KPSS_results[i,r]) > (as.numeric(KPSS_results[i,r+1]) %*% 1.96)){
KPSS_results[i,r] = paste0(KPSS_results[i,r],"*")
}else{
KPSS_results[i,r] = KPSS_results[i,r]
}
}
}
#*****Print Test Results
print(ADF_results[,z])
print(KPSS_results[,z])
print(ADF_results[,z])
